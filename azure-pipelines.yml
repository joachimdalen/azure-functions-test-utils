trigger: none

pool:
  vmImage: "ubuntu-latest"

parameters:
  - name: "WRITE_LOG"
    type: boolean
    default: false
    displayName: "Write logfiles"
  - name: "AZURITE_SILENT"
    type: boolean
    default: false
    displayName: "Run Azurite in silent mode"
  - name: SELECTED_PACKAGE_VERSION
    type: string
    displayName: 'Package Version'
    default: 'not-set'
  - name: "IS_PREVIEW"
    type: boolean
    default: false
    displayName: "Is Pre-Release"
  - name: "INCREASE_MAJOR"
    type: boolean
    default: false
    displayName: "Increase Major Version"
  - name: "INCREASE_MINOR"
    type: boolean
    default: false
    displayName: "Increase Minor Version"
  - name: "INCREASE_PATCH"
    type: boolean
    default: false
    displayName: "Increase Patch Version"

variables:
  BUILD_CONFIGURATION: "Debug"
  PACKAGE_NAME: 'JoachimDalen.AzureFunctions.TestUtils'
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

stages:
  - stage: buildAndTest
    displayName: "Build & Test"
    jobs:
      - job: "Build"
        displayName: "Build job"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            displayName: "Install nodeJS"
            inputs:
              versionSpec: "13.x"
              checkLatest: true
          - task: Bash@3
            displayName: "Install Azurite"
            inputs:
              targetType: inline
              script: npm i -g azurite
          - task: Bash@3
            displayName: "Install Core Tools"
            inputs:
              targetType: inline
              script: npm i -g azure-functions-core-tools@3
          - task: DotNetCoreCLI@2
            displayName: "Restore project dependencies"
            inputs:
              command: "restore"
              projects: "**/*.csproj"
          - task: DotNetCoreCLI@2
            displayName: "Build the project - $(BUILD_CONFIGURATION)"
            inputs:
              command: "build"
              arguments: "--no-restore --configuration $(BUILD_CONFIGURATION)"
              projects: "**/*.csproj"
          - task: DotNetCoreCLI@2
            displayName: "Run Tests"
            env:
              AFTU_RUN_AZURITE: true
              AFTU_WRITE_LOG: ${{ parameters.WRITE_LOG }}
              AFTU_AZURITE_SILENT: ${{ parameters.AZURITE_SILENT }}
            inputs:
              command: "test"
              projects: "**/*Tests/*IntegrationTests.csproj"
              arguments: '--configuration $(BUILD_CONFIGURATION)  --collect "Code coverage"'
              testRunTitle: "Integration Tests"
          - task: PowerShell@2
            displayName: 'Set package version'
            name: SetVersion
            inputs:
              filePath: '$(Build.SourcesDirectory)/ci/get-updated-package-version.ps1'
              arguments: '-IncreaseMajor $${{ parameters.INCREASE_MAJOR }} -IncreaseMinor $${{ parameters.INCREASE_MINOR }} -IncreasePatch $${{ parameters.INCREASE_PATCH }} -SelectedVersion ${{ parameters.SELECTED_PACKAGE_VERSION }} -PackageName $(PACKAGE_NAME) -IsPreview $${{ parameters.IS_PREVIEW }}'
              failOnStderr: true
              showWarnings: true
              pwsh: true
          - task: DotNetCoreCLI@2
            displayName: 'Pack Nuget - $(BUILD_CONFIGURATION)'
            inputs:
              command: 'pack'
              packagesToPack: '$(Build.SourcesDirectory)/src/JoachimDalen.AzureFunctions.TestUtils/JoachimDalen.AzureFunctions.TestUtils.csproj'
              configuration: '$(BUILD_CONFIGURATION)'
              packDirectory: '$(Build.ArtifactStagingDirectory)/nuget'
              nobuild: true
              versioningScheme: 'byEnvVar'
              versionEnvVar: 'SETVERSION_UPDATED_PACKAGE_VERSION'
          - task: Bash@3
            condition: and(always(), eq(${{ parameters.WRITE_LOG }}, true))
            inputs:
              targetType: "inline"
              script: "cp -r /tmp/aftu $(Pipeline.Workspace)"
          - task: PublishPipelineArtifact@1
            condition: and(always(), eq(${{ parameters.WRITE_LOG }}, true))
            inputs:
              targetPath: "$(Pipeline.Workspace)/aftu"
              artifact: "aftu-logs"
              publishLocation: "pipeline"
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Nuget'
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/nuget"
              artifact: "nuget-package"
              publishLocation: "pipeline"
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Release Notes'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/release-notes/v$(SetVersion.UPDATED_PACKAGE_VERSION).md'
              artifact: "release-notes"
              publishLocation: "pipeline"
  - stage: publish_nuget
    displayName: 'Publish package'
    condition: eq(variables.isMaster, true)
    dependsOn: 'buildAndTest'
    jobs:
      - deployment:
        variables:
          - group: 'nuget-azure-functions'
          - name: PACKAGE_VERSION
            value: $[ stageDependencies.buildAndTest.Build.outputs['SetVersion.UPDATED_PACKAGE_VERSION'] ]
        displayName: 'Publish package'
        environment: 'nuget-prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - download: current
                  artifact: 'nuget-package'
                - download: current
                  artifact: 'release-notes'
                - task: Bash@3
                  displayName: 'Push nuget package'
                  inputs:
                    targetType: inline
                    script: 'dotnet nuget push $(Pipeline.Workspace)/nuget-package/JoachimDalen.AzureFunctions.TestUtils.$(PACKAGE_VERSION).nupkg -k $(NUGET_API_KEY) -s https://api.nuget.org/v3/index.json'
                - task: GitHubRelease@1
                  displayName: 'Create GitHub Release'
                  inputs:
                    gitHubConnection: github-azure-functions
                    repositoryName: joachimdalen/azure-functions-test-utils
                    tagSource: userSpecifiedTag
                    tag: v$(PACKAGE_VERSION)
                    title: 'v$(PACKAGE_VERSION): Update'
                    assets: $(Pipeline.Workspace)/nuget-package/*.nupkg
                    addChangeLog: false
                    isPreRelease: $${{ parameters.IS_PREVIEW }}
                    releaseNotesSource: filePath
                    releaseNotesFilePath: $(Pipeline.Workspace)/release-notes/v$(PACKAGE_VERSION).md
